---
import BaseSlide from './BaseSlide.astro';
import SlideTitle from '../ui/SlideTitle.astro';
import Text from '../ui/Text.astro';
import Callout from '../ui/Callout.astro';
import Section from '../ui/Section.astro';
---

<BaseSlide id="intro" variant="centered">
  <Section spacing="relaxed">
    <SlideTitle size="xl" gradient>useEffect</SlideTitle>
    <Text size="xl" class="mb-8">Когда он нужен, а когда нет</Text>

    <Section class="max-w-4xl">
      <Text size="lg">
        Сколько раз вы писали useEffect за последнюю неделю? А сколько из них
        были действительно необходимы? Сегодня мы поговорим об одном из самых
        мощных, но, возможно, самом злоупотребляемом хуке в React - useEffect.
      </Text>
      <Text size="lg">
        Мы часто используем его как универсальный молоток для любых задач, не
        связанных напрямую с рендерингом. Но на самом деле, во многих случаях
        useEffect не только не нужен, но и создает скрытые проблемы с
        производительностью, рождает баги и делает код запутанным.
      </Text>

      <Callout variant="primary" class="mt-6">
        <Text class="font-semibold">
          Ключевой тезис: useEffect — это аварийный люк. Он нужен для 'побега'
          из React-парадигмы и синхронизации с внешними системами. Если вы
          используете его для управления внутренним состоянием вашего приложения
          — вы, скорее всего, делаете что-то не так.
        </Text>
      </Callout>
    </Section>
  </Section>
</BaseSlide>
