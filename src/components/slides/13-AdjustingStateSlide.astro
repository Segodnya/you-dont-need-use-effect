---
import BaseSlide from './BaseSlide.astro';
import CodeComparison from '../CodeComparison.astro';
import Text from '../ui/Text.astro';
import Callout from '../ui/Callout.astro';
import Section from '../ui/Section.astro';
---

<BaseSlide
  id="adjusting-state"
  title="6. Корректировка состояния при изменении пропсов"
>
  <Section>
    <Text>
      Эффект, который сбрасывает состояние при изменении пропса -
      распространенный паттерн, но он не оптимален.
    </Text>

    <CodeComparison
      badCode={`function List({ items }) {
  const [selection, setSelection] = useState();

  useEffect(() => {
    setSelection(null);
  }, [items]);
}`}
      goodCode={`// Решение 1: Контролируемый компонент
function List({ items, selection, onSelectionChange }) {
  // selection управляется родителем,
}

// Решение 2: Независимый внутренний state
function List({ items }) {
  const [prevItems, setPrevItems] = useState(items);
  
  if (items !== prevItems) {
    setPrevItems(items);
    setSelection(null);
  }
}`}
      language="tsx"
    />

    <Callout variant="tip">
      Делайте компонент полностью контролируемым или корректируйте состояние во
      время рендера.
    </Callout>
  </Section>
</BaseSlide>
