---
import Presentation from '../layouts/Presentation.astro';
import Navigation from '../components/Navigation.astro';

// ⚡ OPTIMIZATION: Only eagerly import the first 3 slides for instant first paint
// The rest will be lazy-loaded as the user navigates
import IntroSlide from '../components/slides/01-IntroSlide.astro';
import AuthorSlide from '../components/slides/21-AuthorSlide.astro';
import InspirationSlide from '../components/slides/02-InspirationSlide.astro';

// Dynamically import remaining slides to reduce initial bundle size
const WhatIsUseEffectSlide = (
  await import('../components/slides/03-WhatIsUseEffectSlide.astro')
).default;
const ProblemsSlide = (
  await import('../components/slides/04-ProblemsSlide.astro')
).default;
const KeyMessagesSlide = (
  await import('../components/slides/05-KeyMessagesSlide.astro')
).default;
const DerivedStateSlide = (
  await import('../components/slides/06-DerivedStateSlide.astro')
).default;
const ConclusionSlide = (
  await import('../components/slides/07-ConclusionSlide.astro')
).default;
const EmptyEffectsSlide = (
  await import('../components/slides/08-EmptyEffectsSlide.astro')
).default;
const PropOnlyEffectsSlide = (
  await import('../components/slides/09-PropOnlyEffectsSlide.astro')
).default;
const StateChainsSlide = (
  await import('../components/slides/10-StateChainsSlide.astro')
).default;
const RaceConditionsSlide = (
  await import('../components/slides/11-RaceConditionsSlide.astro')
).default;
const EffectAsHandlerSlide = (
  await import('../components/slides/12-EffectAsHandlerSlide.astro')
).default;
const AdjustingStateSlide = (
  await import('../components/slides/13-AdjustingStateSlide.astro')
).default;
const ResettingStateSlide = (
  await import('../components/slides/14-ResettingStateSlide.astro')
).default;
const NotifyingParentSlide = (
  await import('../components/slides/15-NotifyingParentSlide.astro')
).default;
const PassingDataUpSlide = (
  await import('../components/slides/16-PassingDataUpSlide.astro')
).default;
const InitializingStateSlide = (
  await import('../components/slides/17-InitializingStateSlide.astro')
).default;
const WhenNeededSlide = (
  await import('../components/slides/18-WhenNeededSlide.astro')
).default;
const WhatsNextSlide = (
  await import('../components/slides/19-WhatsNextSlide.astro')
).default;
const TechStackSlide = (
  await import('../components/slides/20-TechStackSlide.astro')
).default;

// Define slide structure for navigation
const slides = [
  { id: 'intro', title: 'Введение' },
  { id: 'author', title: 'Об авторе' },
  { id: 'inspiration', title: 'Вдохновение' },
  { id: 'what-is-useeffect', title: 'Что такое useEffect' },
  { id: 'problems', title: 'Проблемы' },
  { id: 'key-messages', title: 'Ключевые сообщения' },
  { id: 'derived-state', title: '3. Производное состояние' },
  { id: 'empty-effects', title: '1. Пустые эффекты' },
  { id: 'prop-only-effects', title: '2. Эффекты с пропсами' },
  { id: 'state-chains', title: '4. Цепочки обновлений' },
  { id: 'race-conditions', title: '4б. Race Conditions' },
  { id: 'effect-as-handler', title: '5. Эффект как обработчик' },
  { id: 'adjusting-state', title: '6. Корректировка состояния' },
  { id: 'resetting-state', title: '7. Сброс состояния' },
  { id: 'notifying-parent', title: '8. Уведомление родителя' },
  { id: 'passing-data-up', title: '9. Передача данных вверх' },
  { id: 'initializing-state', title: '10. Инициализация состояния' },
  { id: 'when-needed', title: 'Когда useEffect нужен' },
  { id: 'whats-next', title: 'Что дальше?' },
  { id: 'conclusion', title: 'Заключение' },
  { id: 'tech-stack', title: 'Технический стек' },
];
---

<Presentation>
  <main
    class="h-screen overflow-y-scroll lg:snap-y lg:snap-mandatory scroll-smooth scroll-container"
  >
    <IntroSlide />
    <AuthorSlide />
    <InspirationSlide />
    <WhatIsUseEffectSlide />
    <ProblemsSlide />
    <KeyMessagesSlide />
    <EmptyEffectsSlide />
    <PropOnlyEffectsSlide />
    <DerivedStateSlide />
    <StateChainsSlide />
    <RaceConditionsSlide />
    <EffectAsHandlerSlide />
    <AdjustingStateSlide />
    <ResettingStateSlide />
    <NotifyingParentSlide />
    <PassingDataUpSlide />
    <InitializingStateSlide />
    <WhenNeededSlide />
    <WhatsNextSlide />
    <ConclusionSlide />
    <TechStackSlide />
  </main>

  <Navigation slides={slides} />
</Presentation>
